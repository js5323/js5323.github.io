<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于H5中的音频、视频自动播放</title>
    <url>/20190918/audioAutoPlay/</url>
    <content><![CDATA[<p>因为浏览器的限制，不支持音频自动播放，无论是设置属性autoplay或者通过js去控制，都无法自动播放</p>
<p>并且会抛出一个Promise的错误:</p>
<p><code>Uncaught (in promise) DOMException</code></p>
<p>忧伤，原因是为了提高用户体验，必须要有用户交互才能触发播放：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Chrome’s autoplay policies are simple:</span><br><span class="line"></span><br><span class="line">    1、Muted autoplay is always allowed.</span><br><span class="line">    video标签设置muted，即默认对视频进行静音可以进行播放，</span><br><span class="line">    </span><br><span class="line">    2、Autoplay with sound is allowed if:</span><br><span class="line">    </span><br><span class="line">        User has interacted with the domain (click, tap, etc.).</span><br><span class="line">        </span><br><span class="line">        On desktop, the user’s Media Engagement Index threshold has been crossed,</span><br><span class="line">        meaning the user has previously play video with sound.</span><br><span class="line">        </span><br><span class="line">        On mobile, the user has added the site to his or her home screen.</span><br><span class="line">        </span><br><span class="line">        Top frames can delegate autoplay permission to their iframes to</span><br><span class="line">        allow autoplay with sound.</span><br></pre></td></tr></table></figure></p>
<p><a href="https://docs.cocos.com/creator/manual/zh/audio/compatibility.html" target="_blank" rel="noopener">COCOS 的文档也有针对音频播放的兼容说明，可以参考一下</a></p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>1、可以在界面设计一个按钮，通过引导用户进行交互，手动开启播放</p>
<p>2、相比1，如果实在无法放置一个按钮进行交互，只能捕获用户触摸屏幕进行播放，或者在微信浏览器中，在jssdk的ready回调中执行播放才能真正播放，示例代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const audio = xxx;</span><br><span class="line">const play = function () &#123;</span><br><span class="line">  audio.play();</span><br><span class="line">  document.removeEventListener(&quot;touchstart&quot;, play, false);</span><br><span class="line">&#125;;</span><br><span class="line">document.addEventListener(&quot;WeixinJSBridgeReady&quot;, function () &#123;</span><br><span class="line">  play();</span><br><span class="line">&#125;, false);</span><br><span class="line">document.addEventListener(&quot;touchstart&quot;, play, false);</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>H5</tag>
      </tags>
  </entry>
  <entry>
    <title>字体工具：Font-Spider</title>
    <url>/20170906/font-spider/</url>
    <content><![CDATA[<p>最近遇到一个项目需要自定义字体，如果文字多且改动频率高的话，切图是很不现实的，所以最好用WebFont来解决。</p>
<p>但是中文不比英文，英文才26个字母，相比字体太大是一个问题，无意间找到一个工具 <a href="http://font-spider.org/" target="_blank" rel="noopener">字蛛 Font Spider</a>，一个中文字体压缩器，具体的说明和使用官网很详细，我就不做搬运工了.</p>
<p>工具会自动识别html中的文字，然后把使用到的文字从原来的字体文件中抽出，针对一些需要使用字体并且文字使用不是很多h5，可以最大化的压缩字体文件</p>
<p><img src="/20170906/font-spider/1.png" alt><br><img src="/20170906/font-spider/2.png" alt></p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Web Font</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/20170905/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="新建文章"><a href="#新建文章" class="headerlink" title="新建文章"></a>新建文章</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="本地服务预览"><a href="#本地服务预览" class="headerlink" title="本地服务预览"></a>本地服务预览</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="生成"><a href="#生成" class="headerlink" title="生成"></a>生成</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="遇到的问题："><a href="#遇到的问题：" class="headerlink" title="遇到的问题："></a>遇到的问题：</h3><p>无法生成标签、分类：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">原因是头部需要制定类型（<span class="built_in">type</span>），不然不会自动生成：</span><br><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line"><span class="built_in">type</span>: <span class="string">"tags"</span></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line"><span class="built_in">type</span>: categories</span><br><span class="line">---</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>随笔</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>从字体文件抽离需要用的文字</title>
    <url>/20180829/sfntly/</url>
    <content><![CDATA[<p>中文字体TTF文件的大小实在是很大，压缩后还是很大，在页面中使用还是很影响性能，<br>最终想办法是能否把只需要用的字体从文件中抽出来，找了一下，还真有相关的工具…</p>
<h2 id="使用工具：sfnttool"><a href="#使用工具：sfnttool" class="headerlink" title="使用工具：sfnttool"></a>使用工具：sfnttool</h2><p>sfnttool 是谷歌开源项目 sfntly 内置的工具，他的作用是从一个字体文件中提取指定的文字，导出的字体中将只包含你需要的文字。</p>
<p>以下是能用的jar包<br><a href="https://github.com/js5323/sfntly-builds" target="_blank" rel="noopener">https://github.com/js5323/sfntly-builds</a></p>
<h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar sfnttool.jar -h  </span><br><span class="line">subset [-?|-h|-help] [-b] [-s string] fontfile outfile  </span><br><span class="line">prototype font subsetter  </span><br><span class="line">        -?,-help        print this help information  </span><br><span class="line">        -s,-string       string to subset  </span><br><span class="line">        -b,-bench        benchmark (run 10000 iterations)  </span><br><span class="line">        -h,-hints        strip hints  </span><br><span class="line">        -w,-woff         output woff format  </span><br><span class="line">        -e,-eot  output eot format  </span><br><span class="line">        -x,-mtx  enable microtype express compression for eot format</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">java -jar sfnttool.jar  -s &apos;这是一段测试文字&apos; msyh.ttf msyh_simplify.ttf</span><br></pre></td></tr></table></figure>
<p>结果还是比较理想的，原本的字体文件有5.4m，需要的文字数量大概200个左右，导出后的文件大小200kb左右，大大的优化了文件大的问题</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>Web Font</tag>
      </tags>
  </entry>
  <entry>
    <title>写在开始</title>
    <url>/20170905/%E5%86%99%E5%9C%A8%E5%BC%80%E5%A7%8B/</url>
    <content><![CDATA[<p>你好，欢迎来到我的个人技术博客。<br>入坑前端多年了，但是没有写什么东西，大概也是因为懒吧！<br>最近觉得还是折腾一下好，记录一些平时开发的时候遇到的坑吧！<br>希望我能坚持吧。。。加油</p>
]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>Daily Study 2020.05</title>
    <url>/20200507/daily-study/202005/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="05-07-理一下后面的学习计划"><a href="#05-07-理一下后面的学习计划" class="headerlink" title="05.07 理一下后面的学习计划"></a>05.07 理一下后面的学习计划</h2><p>总体的目标是系统的过一下基础，查漏补缺，把自己的薄弱项竟可能填上，加油！。</p>
<p>大概范围如下：</p>
<ol>
<li>JavaScript基础</li>
<li>HTML和CSS</li>
<li>计算机基础</li>
<li>数据结构和算法</li>
<li>运行环境</li>
<li>框架和类库</li>
<li>前端工程</li>
<li>项目和业务</li>
</ol>
<h2 id="05-14"><a href="#05-14" class="headerlink" title="05.14"></a>05.14</h2><ol>
<li><p>《<a href="https://juejin.im/post/5c41297cf265da613356d4ec" target="_blank" rel="noopener">你能手写一个Promise吗？Yes I promise。</a>》通过这篇文章，大概弄懂了Promise的实现</p>
<p>贴一下具体实现：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PENDING = <span class="string">'pending'</span>;</span><br><span class="line"><span class="keyword">const</span> FULFILLED = <span class="string">'fulfilled'</span>;</span><br><span class="line"><span class="keyword">const</span> REJECTED = <span class="string">'rejected'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AjPromise</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(fn) &#123;</span><br><span class="line">    <span class="keyword">this</span>.state = PENDING;</span><br><span class="line">    <span class="keyword">this</span>.value = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.reason = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">this</span>.onFulfilledCallbacks = [];</span><br><span class="line">    <span class="keyword">this</span>.onRejectedCallbacks = [];</span><br><span class="line">    <span class="keyword">const</span> resolve = <span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value.then(resolve, reject);</span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">          <span class="keyword">this</span>.state = FULFILLED;</span><br><span class="line">          <span class="keyword">this</span>.value = value;</span><br><span class="line">          <span class="keyword">this</span>.onFulfilledCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">            cb = cb(<span class="keyword">this</span>.value);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> reject = <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">          <span class="keyword">this</span>.state = REJECTED;</span><br><span class="line">          <span class="keyword">this</span>.reason = reason;</span><br><span class="line">          <span class="keyword">this</span>.onRejectedCallbacks.map(<span class="function"><span class="params">cb</span> =&gt;</span> &#123;</span><br><span class="line">            cb = cb(<span class="keyword">this</span>.reason);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      fn(resolve, reject);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  then(onFulfilled, onRejected) &#123;</span><br><span class="line">    <span class="keyword">let</span> newPromise;</span><br><span class="line"></span><br><span class="line">    onFulfilled = <span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span> ? onFulfilled : <span class="function"><span class="params">value</span> =&gt;</span> value;</span><br><span class="line">    onRejected =</span><br><span class="line">      <span class="keyword">typeof</span> onRejected === <span class="string">'function'</span></span><br><span class="line">        ? onRejected</span><br><span class="line">        : <span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> reason;</span><br><span class="line">          &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === FULFILLED) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">newPromise = <span class="keyword">new</span> AjPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(<span class="keyword">this</span>.value);</span><br><span class="line">            resolvePromise(newPromise, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === REJECTED) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">newPromise = <span class="keyword">new</span> AjPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(<span class="keyword">this</span>.reason);</span><br><span class="line">            resolvePromise(newPromise, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state === PENDING) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">(<span class="params">newPromise = <span class="keyword">new</span> AjPromise((resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.onFulfilledCallbacks.push(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onFulfilled(value);</span><br><span class="line">            resolvePromise(newPromise, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">this</span>.onRejectedCallbacks.push(<span class="function"><span class="params">reason</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> x = onRejected(reason);</span><br><span class="line">            resolvePromise(newPromise, x, resolve, reject);</span><br><span class="line">          &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolvePromise</span>(<span class="params">promise2, x, resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (x === promise2) &#123;</span><br><span class="line">    reject(<span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">'循环引用'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (x <span class="keyword">instanceof</span> AjPromise) &#123;</span><br><span class="line">    <span class="keyword">if</span> (x.state === PENDING) &#123;</span><br><span class="line">      x.then(</span><br><span class="line">        y =&gt; &#123;</span><br><span class="line">          resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">        &#125;,</span><br><span class="line">        reason =&gt; &#123;</span><br><span class="line">          reject(reason);</span><br><span class="line">        &#125;</span><br><span class="line">      );</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      x.then(resolve, reject);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &amp;&amp; (<span class="keyword">typeof</span> x === <span class="string">'function'</span> || <span class="keyword">typeof</span> x === <span class="string">'object'</span>)) &#123;</span><br><span class="line">    <span class="keyword">let</span> called = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">let</span> then = x.then;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> then === <span class="string">'function'</span>) &#123;</span><br><span class="line">        then.call(</span><br><span class="line">          x,</span><br><span class="line">          y =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            resolvePromise(promise2, y, resolve, reject);</span><br><span class="line">          &#125;,</span><br><span class="line">          r =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">            called = <span class="literal">true</span>;</span><br><span class="line">            reject(r);</span><br><span class="line">          &#125;</span><br><span class="line">        );</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        resolve(x);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      <span class="keyword">if</span> (called) <span class="keyword">return</span>;</span><br><span class="line">      called = <span class="literal">true</span>;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    resolve(x);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">AjPromise.deferred = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> defer = &#123;&#125;;</span><br><span class="line">  defer.promise = <span class="keyword">new</span> AjPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    defer.resolve = resolve;</span><br><span class="line">    defer.reject = reject;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> defer;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = AjPromise;</span><br><span class="line"></span><br><span class="line">作者：<span class="literal">null</span>仔</span><br><span class="line">链接：https:<span class="comment">//juejin.im/post/5c41297cf265da613356d4ec</span></span><br><span class="line">来源：掘金</span><br><span class="line">著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="2">
<li><p>看了一篇微前端的文章，使用了 <a href="https://github.com/umijs/qiankun" target="_blank" rel="noopener">qiankun</a> ，未深入了解，Mark一下后面看看。</p>
<p><code>qiankun</code> 属于无侵入性的微前端框架，对主应用基座和微应用的技术栈都没有要求。</p>
</li>
</ol>
<ol start="3">
<li>明天开始看一下 《JavaScript高级程序设计(第3版)》这本书。</li>
</ol>
<hr>
<h2 id="05-15-05-16"><a href="#05-15-05-16" class="headerlink" title="05.15 ~ 05.16"></a>05.15 ~ 05.16</h2><h3 id="阅读《JavaScript高级程序设计-第3版-》"><a href="#阅读《JavaScript高级程序设计-第3版-》" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》"></a>阅读《JavaScript高级程序设计(第3版)》</h3><p><strong>第一章 JavaScript简介, 小结：</strong></p>
<p>JavaScript 是一种专为与网页交互而设计的脚本语言，由下列三个不同的部分组成:</p>
<ol>
<li>ECMAScript，由 ECMA-262 定义，提供核心语言功能; </li>
<li>文档对象模型(DOM)，提供访问和操作网页内容的方法和接口;</li>
<li>浏览器对象模型(BOM)，提供与浏览器交互的方法和接口。</li>
</ol>
<p><strong>第二章 在HTML中使用JavaScript</strong></p>
<p>浏览器在加载下面所示的代码时就会产生一个错误, 因为按照解析嵌入式代码的规则，当浏览器遇到字符串”“时，就会认为那是结束的</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span> </span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">sayScript</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line">		alert("<span class="tag">&lt;/<span class="name">script</span>&gt;</span>");</span><br><span class="line"> &#125; </span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><strong>小结：</strong></p>
<ul>
<li><p>在包含外部 JavaScript 文件时，必须将 src 属性设置为指向相应文件的 URL。而这个文件既可 以是与包含它的页面位于同一个服务器上的文件，也可以是其他任何域中的文件。</p>
</li>
<li><p>所有<script>元素都会按照它们在页面中出现的先后顺序依次被解析。在不使用 defer 和 async 属性的情况下，只有在解析完前面<script>元素中的代码之后，才会开始解析后面 <script>元素中的代码。</p>
</li>
<li><p>由于浏览器会先解析完不使用 defer 属性的<script>元素中的代码，然后再解析后面的内容， 所以一般应该把<script>元素放在页面最后，即主要内容后面，</body>标签前面。</p>
</li>
<li><p>使用 defer 属性可以让脚本在文档完全呈现之后再执行。延迟脚本总是按照指定它们的顺序执行。</p>
<p>立即下载，但延迟执行</p>
</li>
<li><p>使用 async 属性可以表示当前脚本不必等待其他脚本，也不必阻塞文档呈现。不能保证异步脚本按照它们在页面中出现的顺序执行。</p>
</li>
</ul>
<h2 id="05-17"><a href="#05-17" class="headerlink" title="05.17"></a>05.17</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第-3章-基本概念"><a href="#阅读《JavaScript高级程序设计-第3版-》第-3章-基本概念" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第 3章 基本概念"></a>阅读《JavaScript高级程序设计(第3版)》第 3章 基本概念</h4><p>开启严格模式，在js顶部或在函数内加入代码： <code>&quot;use strict&quot;</code></p>
<p>typeof 操作符会返回一些令人迷惑但技术上却正确的值。比如，调用 typeof null 会返回”object”，因为特殊值 null 被认为是一个空的对象引用。Safari 5 及之前版本、Chrome 7 及之 前版本在<strong>对正则表达式</strong>调用 typeof 操作符时会返回”function”，而其他浏览器在这种情况下会返回 “object”。</p>
<p>从逻辑角度来看，null 值表 示一个空对象指针，而这也正是使用 typeof 操作符检测 null 值时会返回”object”的原因。</p>
<p>undefined 值是派生自 null 值的，因此 ECMA-262 规定对它们的相等性测试要返回 true:</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">alert(<span class="literal">null</span> == <span class="literal">undefined</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>只要意在保存对象的变量还没有真正保存对象，就应该明确地让该变量保存 null 值。这样做不仅可以 体现 null 作为空对象指针的惯例，而且也有助于进一步区分 null 和 undefined。</p>
<p><strong>Number</strong></p>
<p><strong>八进制字面量</strong>在<strong>严格模式</strong>下是无效的，会导致支持的 JavaScript 引擎抛出错误。</p>
<p>在进行算术计算时，所有以八进制和十六进制表示的数值最终都将被转换成十进制数值。</p>
<p>保存浮点数值需要的内存空间是保存整数值的两倍，因此 ECMAScript 会不失时机地将浮点数值 转换为整数值。</p>
<p>e表示法：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> floatNum = <span class="number">3.125e7</span>; <span class="comment">// 等于31250000, 3.125 乘以 10^7</span></span><br></pre></td></tr></table></figure>
<p>如果某次计算的 结果得到了一个超出 JavaScript 数值范围的值，那么这个数值将被自动转换成特殊的 Infinity 值。如果这个数值是负数，则会被转换成-Infinity(负无穷)，如果这个数值是正数，则会被转 换成 Infinity(正无穷).</p>
<p><strong>NaN 本身有两个非同寻常的特点。</strong>首先，任何涉及 NaN 的操作(例如 NaN/10)都会返回 NaN，这 个特点在多步计算中有可能导致问题。其次，NaN 与任何值都不相等，包括 NaN 本身。例如，下面的代码会返回 false</p>
<p>小结：</p>
<p>Number()函数的转换规则如下。</p>
<ol>
<li>如果是 Boolean 值，true 和 false 将分别被转换为 1 和 0。</li>
<li>如果是数字值，只是简单的传入和返回。</li>
<li>如果是 null 值，返回 0。</li>
<li>如果是 undefined，返回 NaN。</li>
<li>如果是字符串，遵循下列规则:<ol>
<li>如果字符串中只包含数字(包括前面带正号或负号的情况)，则将其转换为十进制数值，即”1” 会变成 1，”123”会变成 123，而”011”会变成 11(注意:前导的零被忽略了);</li>
<li>如果字符串中包含有效的浮点格式，如”1.1”，则将其转换为对应的浮点数值(同样，也会忽 略前导零);</li>
<li>如果字符串中包含有效的十六进制格式，例如”0xf”，则将其转换为相同大小的十进制整 数值;</li>
<li>如果字符串是空的(不包含任何字符)，则将其转换为 0;</li>
<li>如果字符串中包含除上述格式之外的字符，则将其转换为 NaN。</li>
</ol>
</li>
<li>如果是对象，则调用对象的 valueOf()方法，然后依照前面的规则转换返回的值。如果转换<br> 的结果是 NaN，则调用对象的 toString()方法，然后再次依照前面的规则转换返回的字符<br> 串值。</li>
</ol>
<p><strong>parseInt</strong> 转换规则</p>
<ol>
<li>parseInt()转换空字符串会返回 NaN</li>
<li>如果第一个字符是数字字符，parseInt()会继续解析第二个字符，直到解析完所有后续字符或者遇到了 一个非数字字符。</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">paresInt(<span class="string">"1234eee"</span>); =&gt; <span class="number">1234</span></span><br></pre></td></tr></table></figure>
<ol start="3">
<li>类似地，”22.5” 4 会被转换为 22，因为小数点并不是有效的数字字符。</li>
<li>如果字符串以”0x”开头且后跟数字字符，就会将其当作一 5 个十六进制整数;</li>
<li>如果字符串以”0”开头且后跟数字字符，则会将其当作一个八进制数来解析。</li>
<li>函数提供第二个参数:转换 时使用的基数(即多少进制)。</li>
</ol>
<p><strong>parseFloat</strong></p>
<p>与 parseInt 区别：</p>
<ol>
<li>第一个小数点有效</li>
<li>始终都会忽略前导的零</li>
<li>没有第二个参数指定基数</li>
</ol>
<p>如果字符串包含的是一个可解析为整数的数(没有小数点，或者小数点后 都是零)，parseFloat()会返回整数</p>
<p><strong>Object</strong></p>
<p>Object 的每个实例都具有下列属性和方法。</p>
<ul>
<li>constructor:保存着用于创建当前对象的函数。对于前面的例子而言，构造函数(constructor) 8 就是 Object()。</li>
<li>hasOwnProperty(propertyName):用于检查给定的属性在当前对象实例中(而不是在实例 的原型中)是否存在。其中，作为参数的属性名(propertyName)必须以字符串形式指定(例 如:o.hasOwnProperty(“name”))。</li>
<li>isPrototypeOf(object):用于检查传入的对象是否是传入对象的原型(第 5 章将讨论原 型)</li>
<li><p>propertyIsEnumerable(propertyName):用于检查给定的属性是否能够使用 for-in 语句 (本章后面将会讨论)来枚举。与 hasOwnProperty()方法一样，作为参数的属性名必须以字符串形式指定。</p>
</li>
<li><p>toLocaleString():返回对象的字符串表示，该字符串与执行环境的地区对应。</p>
</li>
<li>toString():返回对象的字符串表示。 </li>
<li>valueOf():返回对象的字符串、数值或布尔值表示。通常与 toString()方法的返回值相同。</li>
</ul>
<p><strong>位操作符</strong></p>
<p>ECMAScript 中的所有数 值都以 IEEE-754 64 位格式存储，但位操作符并不直接操作 64 位的值。而是先将 64 位的值转换成 32 位 的整数，然后执行操作，最后再将结果转换回 64 位。</p>
<p>对于有符号的整数，32 位中的前 31 位用于表示整数的值。第 32 位用于表示数值的符号:0 表示正 数，1 表示负数。这个表示符号的位叫做符号位，符号位的值决定了其他位数值的格式。</p>
<p><strong>With</strong></p>
<p>严格模式下不允许使用 with 语句，否则将视为语法错误。</p>
<blockquote>
<p>由于大量使用 <strong>with</strong> 语句会导致性能下降，同时也会给调试代码造成困难，因此</p>
<p>在开发大型应用程序时，不建议使用 <strong>with</strong> 语句。</p>
</blockquote>
<p><strong>小结:</strong></p>
<p>理解 ECMAScript 及其纷繁复杂的各种细节，是理解其在 Web 浏览器中的实现——JavaScript 的关键。</p>
<ul>
<li>ECMAScript 中的基本数据类型包括 Undefined、Null、Boolean、Number 和 String。</li>
<li>与其他语言不同，ECMScript 没有为整数和浮点数值分别定义不同的数据类型，Number 类型可用于表示所有数值。</li>
<li>ECMAScript 中也有一种复杂的数据类型，即 Object 类型，该类型是这门语言中所有对象的基础类型。</li>
<li>严格模式为这门语言中容易出错的地方施加了限制。</li>
<li>ECMAScript 提供了很多与 C 及其他类 C 语言中相同的基本操作符，包括算术操作符、布尔操作符、关系操作符、相等操作符及赋值操作符等。</li>
<li>ECMAScript 从其他语言中借鉴了很多流控制语句，例如 if 语句、for 语句和 switch 语句等。 ECMAScript 中的函数与其他语言中的函数有诸多不同之处。</li>
<li>无须指定函数的返回值，因为任何 ECMAScript 函数都可以在任何时候返回任何值。<br>实际上，未指定返回值的函数返回的是一个特殊的 undefined 值。</li>
<li>ECMAScript 中也没有函数签名的概念，因为其函数参数是以一个包含零或多个值的数组的形式<br>传递的。</li>
<li>可以向 ECMAScript 函数传递任意数量的参数，并且可以通过 arguments 对象来访问这些参数。</li>
<li>由于不存在函数签名的特性，ECMAScript 函数不能重载。</li>
</ul>
<hr>
<h2 id="05-18"><a href="#05-18" class="headerlink" title="05.18"></a>05.18</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第-4-章-变量、作用域和内存问题"><a href="#阅读《JavaScript高级程序设计-第3版-》第-4-章-变量、作用域和内存问题" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第 4 章 变量、作用域和内存问题"></a>阅读《JavaScript高级程序设计(第3版)》第 4 章 变量、作用域和内存问题</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">obj</span>) </span>&#123; </span><br><span class="line">  obj.name = <span class="string">"Nicholas"</span>; </span><br><span class="line">  obj = <span class="keyword">new</span> <span class="built_in">Object</span>(); </span><br><span class="line">  obj.name = <span class="string">"Greg"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="built_in">Object</span>(); setName(person); alert(person.name); <span class="comment">//"Nicholas"</span></span><br></pre></td></tr></table></figure>
<p>即使在函数内部修改了参数的值，但原始的引用仍然保持未变。实际上，当在函数内部重写 obj 时，这 个变量引用的就是一个局部对象了。而这个局部对象会在函数执行完毕后立即被销毁</p>
<p>全局执行环境直到应用程序退 出——例如关闭网页或浏览器——时才会被销毁</p>
<p><code>arguments</code> 这个对象在全局环境中是不存在的</p>
<p>如果初始化变量时没有使用 var 声明，该变量会自 动被添加到全局环境。</p>
<p>数据不再有用，最好通过将其值设置为 null 来释放其引用,让值脱离 执行环境，以便垃圾收集器下次运行时将其回收。</p>
<p><strong>小结：</strong></p>
<ol>
<li>基本类型值在内存中占据固定大小的空间，因此被保存在栈内存中;</li>
<li>从一个变量向另一个变量复制基本类型的值，会创建这个值的一个副本;</li>
<li>引用类型的值是对象，保存在堆内存中;</li>
<li>包含引用类型值的变量实际上包含的并不是对象本身，而是一个指向该对象的指针;</li>
<li>从一个变量向另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终都指向同<br>一个对象;</li>
<li>确定一个值是哪种基本类型可以使用 typeof 操作符，而确定一个值是哪种引用类型可以使用 instanceof 操作符。</li>
</ol>
<p>所有变量(包括基本类型和引用类型)都存在于一个执行环境(也称为作用域)当中，这个执 行环境决定了变量的生命周期，以及哪一部分代码可以访问其中的变量。以下是关于执行环境的几 点总结:</p>
<ol>
<li><p>执行环境有全局执行环境(也称为全局环境)和函数执行环境之分;</p>
</li>
<li><p>每次进入一个新执行环境，都会创建一个用于搜索变量和函数的作用域链;</p>
</li>
<li><p>函数的局部环境不仅有权访问函数作用域中的变量，而且有权访问其包含(父)环境，乃至全<br> 局环境;</p>
</li>
<li><p>全局环境只能访问在全局环境中定义的变量和函数，而不能直接访问局部环境中的任何数据;</p>
</li>
<li><p>变量的执行环境有助于确定应该何时释放内存。</p>
</li>
</ol>
<p>JavaScript 是一门具有自动垃圾收集机制的编程语言，开发人员不必关心内存分配和回收问题。可 以对 JavaScript 的垃圾收集例程作如下总结。</p>
<ol>
<li>离开作用域的值将被自动标记为可以回收，因此将在垃圾收集期间被删除。</li>
<li>“标记清除”是目前主流的垃圾收集算法，这种算法的思想是给当前不使用的值加上标记，然<br> 后再回收其内存。</li>
<li>另一种垃圾收集算法是“引用计数”，这种算法的思想是跟踪记录所有值被引用的次数。JavaScript<br> 引擎目前都不再使用这种算法;但在 IE 中访问非原生 JavaScript 对象(如 DOM 元素)时，这种<br> 算法仍然可能会导致问题。</li>
<li>当代码中存在循环引用现象时，“引用计数”算法就会导致问题。</li>
<li>解除变量的引用不仅有助于消除循环引用现象，而且对垃圾收集也有好处。为了确保有效地回<br> 收内存，应该及时解除不再使用的全局对象、全局对象属性以及循环引用变量的引用。</li>
</ol>
<hr>
<h2 id="05-19-05-20"><a href="#05-19-05-20" class="headerlink" title="05.19 ~ 05.20"></a>05.19 ~ 05.20</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》-第-5-章-引用类型"><a href="#阅读《JavaScript高级程序设计-第3版-》-第-5-章-引用类型" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》 第 5 章 引用类型"></a>阅读《JavaScript高级程序设计(第3版)》 第 5 章 引用类型</h4><p><strong>Object 类型</strong></p>
<p><strong>Array 类型</strong></p>
<p><strong>Date 类型</strong></p>
<p>Date 类型保存的日期能够精确到 1970 年 1 月 1 日之前或之后的 285 616 年</p>
<p><strong>RegExp 类型</strong></p>
<p><strong>Function 类型</strong></p>
<p><code>arguments</code> 有一个名叫 callee 的属性，该属性是一个指针，指向拥有这个 arguments 对象的函数。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123; </span><br><span class="line">	<span class="keyword">if</span> (num &lt;=<span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> num * factorial(num<span class="number">-1</span>) </span><br><span class="line">  &#125;</span><br><span class="line">&#125;	</span><br><span class="line"><span class="comment">// 使用 arguments.callee ：</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>)</span>&#123; </span><br><span class="line">  <span class="keyword">if</span> (num &lt;=<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num<span class="number">-1</span>)</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当函数在严格模式下运行时，访问 arguments.callee 会导致错误。ECMAScript 5 还定义了 arguments.caller 属性，但在严格模式下访问它也会导致错误，而在非严格模式下这个属性始终是 undefined。定义这个属性是为了分清 arguments.caller 和函数的 caller 属性。以上变化都是为 了<strong>加强这门语言的安全性</strong>，这样第三方代码就不能在相同的环境里窥视其他代码了。</p>
<p>严格模式还有一个限制:不能为函数的 caller 属性赋值，否则会导致错误。</p>
<p>函数是对象，length 属性表示函数希望接收的命名参数的个数</p>
<p>在 ECMAScript 5 中，prototype 属性是不可枚举的，因此使用 for-in 无法发现。</p>
<p>在严格模式下，未指定环境对象而调用函数，则 this 值不会转型为 window。 除非明确把函数添加到某个对象或者调用 apply()或 call()，否则 this 值将是 undefined。</p>
<p><strong>基本包装 类型</strong></p>
<p><strong>String</strong></p>
<p>slice()和 substring()的第二个参数指定的是子字符串最后一个字符后面的位置。而 substr()的第二个参数指定的则是返回的字符个数。</p>
<p><strong>单体内置对象</strong></p>
<h2 id="05-21-05-22"><a href="#05-21-05-22" class="headerlink" title="05.21 ~ 05.22"></a>05.21 ~ 05.22</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第6章-面向对象的程序设计"><a href="#阅读《JavaScript高级程序设计-第3版-》第6章-面向对象的程序设计" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第6章 面向对象的程序设计"></a>阅读《JavaScript高级程序设计(第3版)》第6章 面向对象的程序设计</h4><p><em>Object</em>.defineProperty</p>
<p><em>Object</em>.getOwnPropertyDescriptor</p>
<p>在使用 for-in 循环时，返回的是所有能够通过对象访问的、可枚举的(enumerated)属性，其中 既包括存在于实例中的属性，也包括存在于原型中的属性。屏蔽了原型中不可枚举属性(即将 [[Enumerable]]标记为 false 的属性)的实例属性也会在 for-in 循环中返回，因为根据规定，所 有开发人员定义的属性都是可枚举的——只有在 IE8 及更早版本中例外。</p>
<p>如果 在已经创建了实例的情况下重写原型，那么就会切断现有实例与新原型之间的联系。</p>
<p><strong>创建对象</strong></p>
<p>工厂模式</p>
<p>构造函数模式</p>
<p>原型模式</p>
<p>组合使用构造函数模式和原型模式</p>
<p>动态原型模式</p>
<p>寄生构造函数模式</p>
<p><strong>继承</strong></p>
<p>原型链</p>
<p>借用构造函数</p>
<p>组合继承</p>
<p>原型式继承</p>
<p>寄生式继承</p>
<p>寄生组合式继承</p>
<h2 id="05-23"><a href="#05-23" class="headerlink" title="05.23"></a>05.23</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第7章-函数表达式"><a href="#阅读《JavaScript高级程序设计-第3版-》第7章-函数表达式" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第7章 函数表达式"></a>阅读《JavaScript高级程序设计(第3版)》第7章 函数表达式</h4><p>定义函数的方式有两种:</p>
<ul>
<li>函数声明    <strong>function funcName(){}</strong>, 特征：函数声明提升</li>
<li>函数表达式  <strong>var funcName = function(){}</strong></li>
</ul>
<p>关于函数声明，它的一个重要特征就是函数声明提升(function declaration hoisting)，意思是在执行 代码之前会先读取函数声明。这就意味着可以把函数声明放在调用它的语句后面。</p>
<p><strong>闭包</strong>是指有权访问另一个 函数作用域中的变量的函数。</p>
<p>初始化未经声明的变量，总是会创建一个全局变量。但也要知道，在严格模式下 给未经声明的变量赋值会导致错误。</p>
<p>多查找作用域链中的一个层次，就会在一定程度上影响查找速度。而这正是使用 闭包和私有变量的一个显明的不足之处。</p>
<p>JavaScript 中的函数表达式和闭包都是极其有用的特性，利用它们可以实现很多功能。不过，因为</p>
<p>创建闭包必须维护额外的作用域，所以过度使用它们可能会占用大量内存。</p>
<h2 id="05-24"><a href="#05-24" class="headerlink" title="05.24"></a>05.24</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第8章-BOM-第9章-客户端监测"><a href="#阅读《JavaScript高级程序设计-第3版-》第8章-BOM-第9章-客户端监测" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第8章 BOM ~ 第9章 客户端监测"></a>阅读《JavaScript高级程序设计(第3版)》第8章 BOM ~ 第9章 客户端监测</h4><p>主要是讲述了 window、location、navigator、screen、history</p>
<p>以及通过 navigator 包含的客户端信息，以及所在的系统环境的相关信息，来区分不同的浏览器和版本，以及系统。</p>
<h2 id="05-25-05-27"><a href="#05-25-05-27" class="headerlink" title="05.25 - 05.27"></a>05.25 - 05.27</h2><h4 id="阅读《JavaScript高级程序设计-第3版-》第10章-DOM-第11章-DOM的拓展"><a href="#阅读《JavaScript高级程序设计-第3版-》第10章-DOM-第11章-DOM的拓展" class="headerlink" title="阅读《JavaScript高级程序设计(第3版)》第10章 DOM  ~ 第11章 DOM的拓展"></a>阅读《JavaScript高级程序设计(第3版)》第10章 DOM  ~ 第11章 DOM的拓展</h4><p>浏览器对 domain 属性有一个限制，如果域名一开始是“松散的”(loose)，那么不能将它再设 置为“紧绷的”(tight)。换句话说，在将 document.domain 设置为”wrox.com”之后，就不能再将其 设置回”p2p.wrox.com”，否则将会导致错误</p>
<p>每次循环都设置一次 innerHTML 的做法效率很低。而且，每次循环还要从 innerHTML 中读 取一次信息，就意味着每次循环要访问两次 innerHTML,最好的做法是单独构建字符串，然后再一次 性地将结果字符串赋值给 innerHTML</p>
<h4 id="第12章-DOM2-和-DOM3"><a href="#第12章-DOM2-和-DOM3" class="headerlink" title="第12章 DOM2 和 DOM3"></a>第12章 DOM2 和 DOM3</h4><p>主要描述了样式相关内容。</p>
<p>DOM2 级规范定义了一些模块，用于增强 DOM1 级。“DOM2 级核心”为不同的 DOM 类型引入了 一些与 XML 命名空间有关的方法。这些变化只在使用 XML 或 XHTML 文档时才有用;对于 HTML 文 档没有实际意义。除了与 XML 命名空间有关的方法外，“DOM2 级核心”还定义了以编程方式创建 Document 实例的方法，也支持了创建 DocumentType 对象。</p>
<h3 id="05-28-第13章-事件"><a href="#05-28-第13章-事件" class="headerlink" title="05.28  第13章 事件"></a>05.28  第13章 事件</h3><p>事件流描述的是从页面中接收事件的顺序。</p>
<p>IE 的事件流是<strong>事件冒泡流</strong>，而 Netscape Communicator 的事件流是<strong>事 件捕获流</strong>。</p>
<p>IE 的事件流叫做事件冒泡(event bubbling)，即事件开始时由最具体的元素(文档中嵌套层次最深 的那个节点)接收，然后逐级向上传播到较为不具体的节点(文档)。</p>
<p>由于老版本的浏览器不支持，因此很少有人使用事件捕获。我们也建议读者放心地使用事件冒泡， 在有特殊需要时再使用事件捕获。</p>
<p>“DOM2级事件”规定的事件流包括三个阶段:事件捕获阶段、处于目标阶段和事件冒泡阶段。</p>
<p><img src="202005/image-20200528231933461.png" alt="image-20200528231933461" style="zoom:50%;" /></p>
<p>“DOM2 级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作:addEventListener() 和 removeEventListener()</p>
<p>在使用事件时，需要考虑如下一些内存与性能方面的问题。</p>
<ul>
<li>有必要限制一个页面中事件处理程序的数量，数量太多会导致占用大量内存，而且也会让用户感觉页面反应不够灵敏。</li>
<li>建立在事件冒泡机制之上的事件委托技术，可以有效地减少事件处理程序的数量。</li>
<li>建议在浏览器卸载页面之前移除页面中的所有事件处理程序。</li>
</ul>
<p>05.30  第14章 表单</p>
</script></p></li></ul>]]></content>
      <tags>
        <tag>Daily study</tag>
      </tags>
  </entry>
</search>
